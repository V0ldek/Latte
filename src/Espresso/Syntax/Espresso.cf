entrypoints Program ;

-- Override Ident definition to allow '~' for internal names.
token SymIdent (letter | '~') (letter | digit | '_' | '~' | '\'')* ;

token LabIdent '.' 'L' '_' (letter | digit | '_' | '\'')* ;

-- Values are %v_x, arguments are %a_x.
token ValIdent '%' ('v' | 'a') '_' (letter | digit | '_' | '~' | '\'')* ;

QIdent. QIdent ::= SymIdent "." SymIdent ;

Program. Program ::= Metadata [Method] ;

Meta. Metadata ::= ".metadata" ":" "[" ".classes" ":" "[" [ClassDef] "]" "]";

ClDef. ClassDef ::= SymIdent ":" "[" ".fields" ":" "[" [FieldDef] "]" ".methods" ":" "[" [MethodDef] "]" "]" ;

FldDef. FieldDef ::= SType SymIdent ;

MthdDef. MethodDef ::= FType QIdent;

terminator FieldDef ";" ;
terminator MethodDef ";" ;
separator ClassDef "" ;

FType. FType ::= SType "(" [SType] ")" ;

Int.       SType ::= "int" ;
Bool.      SType ::= "boolean" ;
Void.      SType ::= "void" ;
Arr.       SType ::= SType "[]" ;
Cl.        SType ::= SymIdent ;
Ref.       SType ::= SType "&" ;

separator SType "," ;

Mthd. Method ::= ".method " SType QIdent "(" [Param] ")" ":" "[" [Instr] "]" ;

Param. Param ::= SType ValIdent ;
separator Param "," ;

separator Method "" ;

ILabel.    Instr ::= LabIdent ":" ;
ILabelAnn. Instr ::= LabIdent ":" "(" "lines" Integer "to" Integer ")" ; 
IVRet.     Instr ::= "return" ";" ;
IRet.      Instr ::= "return" Val ";" ;
IOp.       Instr ::= ValIdent ":=" Val Op Val ";" ;
ISet.      Instr ::= ValIdent ":=" Val ";" ;
ISwap.     Instr ::= "swap" SType ValIdent ValIdent ";" ;
IUnOp.     Instr ::= ValIdent ":=" UnOp Val ";" ;
IVCall.    Instr ::= Call ";" ;
ICall.     Instr ::= ValIdent ":=" Call ";" ;
INew.      Instr ::= ValIdent ":=" "new" SType ";" ;
INewArr.   Instr ::= ValIdent ":=" "newarr" SType "[" Val "]" ";" ;
INewStr.   Instr ::= ValIdent ":=" "newstr" String ";" ;
IJmp.      Instr ::= "jump" LabIdent ";" ;
ICondJmp.  Instr ::= "jump" "if" Val "then" LabIdent "else" LabIdent ";" ;
ILoad.     Instr ::= ValIdent ":=" "load" Ptr ";" ;
IStore.    Instr ::= "store" Val "into" Ptr ";" ;
IPhi.      Instr ::= ValIdent ":=" "phi" "(" [PhiVariant] ")" ";" ;
IEndPhi.   Instr ::= "endphi" ";" ;

PFld.    Ptr ::= SType "fldptr" Val QIdent ;
PElem.   Ptr ::= SType "elemptr" Val "[" Val "]" ;
PArrLen. Ptr ::= "arrlen" Val ;
PLocal.  Ptr ::= SType "local" Integer ;
PParam.  Ptr ::= SType "param" Integer ValIdent ;

PhiVar. PhiVariant ::= LabIdent ":" Val ;

Call.     Call ::= "call" SType QIdent "(" [Val] ")" ;
CallVirt. Call ::= "callvirt" SType QIdent "(" [Val] ")" ;

separator Instr "" ;
separator Val "," ;
separator PhiVariant "," ;

VInt.    Val ::= Integer ;
VNegInt. Val ::= "-" Integer ;
VTrue.   Val ::= "true" ;
VFalse.  Val ::= "false" ;
VNull.   Val ::= SType "null" ;
VVal.    Val ::= SType ValIdent ;

OpAdd. Op ::= "+" ;
OpSub. Op ::= "-" ;
OpMul. Op ::= "*" ;
OpDiv. Op ::= "/" ;
OpMod. Op ::= "%" ;
OpLTH. Op ::= "<" ;
OpLE.  Op ::= "<=" ;
OpGTH. Op ::= ">" ;
OpGE.  Op ::= ">=" ;
OpEQU. Op ::= "==" ;
OpNE.  Op ::= "!=" ;

UnOpNeg. UnOp ::= "-" ;
UnOpNot. UnOp ::= "!" ;

comment "//" ;
comment "/*" "*/" ;